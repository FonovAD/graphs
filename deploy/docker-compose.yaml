version: '3.5'

networks:
  graphs:

services:
  grafana:
    image: grafana/grafana
    user: root
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - graphs

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ../prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    container_name: prometheus
    hostname: prometheusS
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - graphs

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    container_name: exporter
    hostname: exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - "9100:9100"
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - graphs

  graphs_back:
    container_name: graphs_back
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ENV=docker
      - TESTING=testing
    ports:
      - "8080:8080"
      - "9091:9091"
    networks:
      - graphs
#    depends_on:
#      graphs_db:
#        condition: service_healthy

  graphs_db:
    image: postgres
    container_name: database
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER} -h localhost -p 5432" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ../scripts/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    networks:
      - graphs


#  graphs_db_test:
#    image: postgres
#    container_name: database_test
#    ports:
#      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
#    environment:
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER} -h localhost -p 5432" ]
#      interval: 5s
#      timeout: 5s
#      retries: 5
#    volumes:
#      - ../scripts/setup_test_db.sql:/docker-entrypoint-initdb.d/create_tables.sql
#    networks:
#      - graphs